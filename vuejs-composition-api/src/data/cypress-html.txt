<p>As of Cypress 7.0, the new Component Testing (CT) runner is now bundled with the Cypress when you install it! It takes inspiration from the original CT implementation, which was hidden behind the <code>experimentalComponentTesting</code> flag.</p>
<p>In this blog post we will see how to set up CT with a Vue CLI project. CT supports both Vue 2 and Vue 3, with TypeScript support out of the box.</p>
<p>You can get the source code for the blog post <a href="https://github.com/lmiller1990/vue-cypress-template">here</a>.</p>
<h2 id="creating-a-new-vue-cli-project">Creating a new Vue CLI Project</h2>
<p>Create a new Vue CLI project to get started. For this example I chose Vue 2 and TypeScript, but everything works exactly the same with Vue 3.</p>
<h2 id="configuring-cypress-component-testing">Configuring Cypress Component Testing</h2>
<p>Once you&#39;ve got a Vue project, you&#39;ll also need to install Cypress and the Webpack Dev Server and Vue adapters. Vue CLI projects are Webpack based; that&#39;s why we are installing the relevant Webpack adapter:</p>
<pre><code class="language-sh">yarn <span class="hljs-keyword">add</span> cypress <span class="hljs-variable">@cypress</span><span class="hljs-operator">/</span>vue <span class="hljs-variable">@cypress</span><span class="hljs-operator">/</span>webpack<span class="hljs-operator">-</span>dev<span class="hljs-operator">-</span>server <span class="hljs-comment">--dev</span>
# <span class="hljs-keyword">or</span> 
npm install cypress <span class="hljs-variable">@cypress</span><span class="hljs-operator">/</span>vue <span class="hljs-variable">@cypress</span><span class="hljs-operator">/</span>webpack<span class="hljs-operator">-</span>dev<span class="hljs-operator">-</span>server <span class="hljs-comment">--dev</span>
</code></pre>
<p>If you would like to use Vue 3, you&#39;ll need the <code>next</code> branch of <code>@cypress/vue</code>. Install that with:</p>
<pre><code class="language-sh">yarn <span class="hljs-keyword">add</span> <span class="hljs-variable">@cypress</span><span class="hljs-operator">/</span>vue<span class="hljs-variable">@next</span> <span class="hljs-comment">--dev</span>
# <span class="hljs-keyword">or</span>
npm install <span class="hljs-variable">@cypress</span><span class="hljs-operator">/</span>vue<span class="hljs-variable">@next</span> <span class="hljs-comment">--dev</span>
</code></pre>
<p>The last thing we need to do is add some basic configuration. It is possible to configure things manually, but to save some time we will use <code>create-cypress-tests</code>, a little utility to help you scaffold configuration, much like the Vue CLI.</p>
<pre><code class="language-sh">yarn <span class="hljs-keyword">create</span> cypress-tests

<span class="hljs-meta"># or npm</span>
npx <span class="hljs-keyword">create</span>-cypress-tests
</code></pre>
<p>You are prompted with &quot;Do you want to setup component testing?&quot;. Answer yes!</p>
<p>The next question asks for your template. Select <code>vue-cli</code>. There are a number of other adapters to use. At the time of this post, the Webpack adapter is the most mature and stable.</p>
<p>The final question asks where you&#39;d like to place your spec files. I like to use <code>src</code>, so my specs are near the relevant components.</p>
<p>The wizard created a number of files for you. The most interesting is <code>cypress/plugins/index.js</code>:</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> { startDevServer } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@cypress/webpack-dev-server&quot;</span>);

<span class="hljs-keyword">const</span> webpackConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@vue/cli-service/webpack.config.js&quot;</span>);

module.<span class="hljs-built_in">exports</span> = (<span class="hljs-literal">on</span>, config) =&gt; {
  <span class="hljs-literal">on</span>(<span class="hljs-string">&quot;dev-server:start&quot;</span>, options =&gt;
    startDevServer({
      options,
      webpackConfig
    })
  );
};
</code></pre>
<p>This will configure the Cypress Webpack Dev Server to use the same <code>webpack.config.js</code> as your project. </p>
<h2 id="writing-some-tests">Writing Some Tests</h2>
<p>Let&#39;s get started! I created <code>src/components/HelloWorld.spec.ts</code> to try things out. Add a minimal test:</p>
<pre><code class="language-ts"><span class="hljs-keyword">import</span> { mount } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@cypress/vue&#x27;</span>
<span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./HelloWorld.vue&#x27;</span>

describe(<span class="hljs-string">&#x27;HelloWorld&#x27;</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  it(<span class="hljs-string">&#x27;renders a message&#x27;</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    const msg = <span class="hljs-string">&#x27;Hello Cypress Component Testing!&#x27;</span>
    mount(HelloWorld, {
      propsData: {
        msg
      }
    })

    cy.get(<span class="hljs-string">&#x27;h1&#x27;</span>).should(<span class="hljs-string">&#x27;have.text&#x27;</span>, msg)
  })
})
</code></pre>
<p>The <code>mount</code> function is very similar to the one from <a href="https://vue-test-utils.vuejs.org/">Vue Test Utils</a>. It&#39;s actually built on top of Vue Test Utils! So you can use the mounting options you might already be familiar with.</p>
<p>Learn more about how to write assertions with Cypress <a href="https://docs.cypress.io/guides/references/assertions">in the official docs</a>. Get an overview of the <code>cy</code> object and how to use it <a href="https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Cypress-Can-Be-Simple-Sometimes">here</a>.</p>
<p>Finally, open the Component Testing runner:</p>
<pre><code class="language-sh">yarn cypress <span class="hljs-keyword">open</span>-<span class="hljs-keyword">ct</span> # or npx cypress <span class="hljs-keyword">open</span>-<span class="hljs-keyword">ct</span>
</code></pre>
<p>Select the spec and watch the test pass!</p>
<p><img src="https://github.com/lmiller1990/vue-cypress-template/raw/master/img1.png" alt="Cypress Component Testing Runner Success"></p>
<p>Try updating the test and making it fail. Cypress will re-run your test (almost) instantly. This makes for a great red-green-refactor loop.</p>
<p><img src="https://github.com/lmiller1990/vue-cypress-template/raw/master/img2.png" alt="Cypress Component Testing Runner Failure"></p>
<h2 id="vue-3-usage">Vue 3 Usage</h2>
<p>Everything works the same with Vue 3. Just make sure you have a Vue 3 project and the correct adapter:</p>
<pre><code class="language-sh">yarn <span class="hljs-keyword">add</span> <span class="hljs-variable">@cypress</span><span class="hljs-operator">/</span>vue<span class="hljs-variable">@next</span> <span class="hljs-comment">--dev</span>
# <span class="hljs-keyword">or</span>
npm install <span class="hljs-variable">@cypress</span><span class="hljs-operator">/</span>vue<span class="hljs-variable">@next</span> <span class="hljs-comment">--dev</span>
</code></pre>
<p>The mounting options are the same as <a href="https://next.vue-test-utils.vuejs.org/api/#mount">Vue Test Utils</a>, so if you&#39;ve used Vue Test Utils before, you&#39;ll feel right at home. </p>
<h2 id="discussion">Discussion</h2>
<p>Cypress Component Testing is an alternative to a jsdom based testing environment, such as Jest and Vue Test Utils. Cypress Component Testing offers many benefits:</p>
<ul>
<li>Runs in a real browser. This means your tests are closer to what your users will be experiencing.</li>
<li>Visual. You can see exactly what is rendered. No more <code>console.log(wrapper.html())</code>.</li>
<li>Powered by Cypress - the most popular and reliable E2E testing tool out there.</li>
</ul>
<p>It also doubles as a <em>design environment</em>. You can see the component as you develop it, and hot reload give you a near instance feedback loop. It can potentially take the place of not only your Jest based test infrastructure, but your Storybook based design infrastructure as well. </p>
<p>Cypress Component Testing is still in alpha but the product is quickly evolving and promises to change the landscape of Component Testing.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Cypress Component Testing brings everything that is great about Cypress to Component Testing. Since the underlying adapters are built on libraries like Webpack and Vue Test Utils, you don&#39;t need to throw away your entire test suite - incrementally migration is more than possible. </p>
<p>The visual aspect united testing and design in a single tool. My days of grepping a messy console output to figure out what the user will see are over - I can see exactly what the component will look like as my tests run.</p>
<p>You can get the source code for the blog post <a href="https://github.com/lmiller1990/vue-cypress-template">here</a>.</p>